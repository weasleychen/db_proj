// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package msdbcall

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MSDBCallClient is the client API for MSDBCall service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MSDBCallClient interface {
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResp, error)
	AddDish(ctx context.Context, in *AddDishReq, opts ...grpc.CallOption) (*AddDishResp, error)
	CheckUserPassword(ctx context.Context, in *CheckUserPasswordReq, opts ...grpc.CallOption) (*CheckUserPasswordResp, error)
	ModifyPassword(ctx context.Context, in *ModifyPasswordReq, opts ...grpc.CallOption) (*ModifyPasswordResp, error)
	CheckUserPhoneUnique(ctx context.Context, in *CheckUserPhoneUniqueReq, opts ...grpc.CallOption) (*CheckUserPhoneUniqueResp, error)
	CheckUserEmailUnique(ctx context.Context, in *CheckUserEmailUniqueReq, opts ...grpc.CallOption) (*CheckUserEmailUniqueResp, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
	GetDishList(ctx context.Context, in *GetDishListReq, opts ...grpc.CallOption) (*GetDishListResp, error)
	DeleteDish(ctx context.Context, in *DeleteDishReq, opts ...grpc.CallOption) (*DeleteDishResp, error)
	GetDishInfo(ctx context.Context, in *GetDishInfoReq, opts ...grpc.CallOption) (*GetDishInfoResp, error)
	GetUserDiscount(ctx context.Context, in *GetUserDiscountReq, opts ...grpc.CallOption) (*GetUserDiscountResp, error)
	StoreConsumeRecord(ctx context.Context, in *StoreConsumeRecordReq, opts ...grpc.CallOption) (*StoreConsumeRecordResp, error)
}

type mSDBCallClient struct {
	cc grpc.ClientConnInterface
}

func NewMSDBCallClient(cc grpc.ClientConnInterface) MSDBCallClient {
	return &mSDBCallClient{cc}
}

func (c *mSDBCallClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResp, error) {
	out := new(CreateUserResp)
	err := c.cc.Invoke(ctx, "/msdbcall.MSDBCall/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mSDBCallClient) AddDish(ctx context.Context, in *AddDishReq, opts ...grpc.CallOption) (*AddDishResp, error) {
	out := new(AddDishResp)
	err := c.cc.Invoke(ctx, "/msdbcall.MSDBCall/AddDish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mSDBCallClient) CheckUserPassword(ctx context.Context, in *CheckUserPasswordReq, opts ...grpc.CallOption) (*CheckUserPasswordResp, error) {
	out := new(CheckUserPasswordResp)
	err := c.cc.Invoke(ctx, "/msdbcall.MSDBCall/CheckUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mSDBCallClient) ModifyPassword(ctx context.Context, in *ModifyPasswordReq, opts ...grpc.CallOption) (*ModifyPasswordResp, error) {
	out := new(ModifyPasswordResp)
	err := c.cc.Invoke(ctx, "/msdbcall.MSDBCall/ModifyPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mSDBCallClient) CheckUserPhoneUnique(ctx context.Context, in *CheckUserPhoneUniqueReq, opts ...grpc.CallOption) (*CheckUserPhoneUniqueResp, error) {
	out := new(CheckUserPhoneUniqueResp)
	err := c.cc.Invoke(ctx, "/msdbcall.MSDBCall/CheckUserPhoneUnique", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mSDBCallClient) CheckUserEmailUnique(ctx context.Context, in *CheckUserEmailUniqueReq, opts ...grpc.CallOption) (*CheckUserEmailUniqueResp, error) {
	out := new(CheckUserEmailUniqueResp)
	err := c.cc.Invoke(ctx, "/msdbcall.MSDBCall/CheckUserEmailUnique", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mSDBCallClient) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	out := new(GetUserInfoResp)
	err := c.cc.Invoke(ctx, "/msdbcall.MSDBCall/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mSDBCallClient) GetDishList(ctx context.Context, in *GetDishListReq, opts ...grpc.CallOption) (*GetDishListResp, error) {
	out := new(GetDishListResp)
	err := c.cc.Invoke(ctx, "/msdbcall.MSDBCall/GetDishList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mSDBCallClient) DeleteDish(ctx context.Context, in *DeleteDishReq, opts ...grpc.CallOption) (*DeleteDishResp, error) {
	out := new(DeleteDishResp)
	err := c.cc.Invoke(ctx, "/msdbcall.MSDBCall/DeleteDish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mSDBCallClient) GetDishInfo(ctx context.Context, in *GetDishInfoReq, opts ...grpc.CallOption) (*GetDishInfoResp, error) {
	out := new(GetDishInfoResp)
	err := c.cc.Invoke(ctx, "/msdbcall.MSDBCall/GetDishInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mSDBCallClient) GetUserDiscount(ctx context.Context, in *GetUserDiscountReq, opts ...grpc.CallOption) (*GetUserDiscountResp, error) {
	out := new(GetUserDiscountResp)
	err := c.cc.Invoke(ctx, "/msdbcall.MSDBCall/GetUserDiscount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mSDBCallClient) StoreConsumeRecord(ctx context.Context, in *StoreConsumeRecordReq, opts ...grpc.CallOption) (*StoreConsumeRecordResp, error) {
	out := new(StoreConsumeRecordResp)
	err := c.cc.Invoke(ctx, "/msdbcall.MSDBCall/StoreConsumeRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MSDBCallServer is the server API for MSDBCall service.
// All implementations must embed UnimplementedMSDBCallServer
// for forward compatibility
type MSDBCallServer interface {
	CreateUser(context.Context, *CreateUserReq) (*CreateUserResp, error)
	AddDish(context.Context, *AddDishReq) (*AddDishResp, error)
	CheckUserPassword(context.Context, *CheckUserPasswordReq) (*CheckUserPasswordResp, error)
	ModifyPassword(context.Context, *ModifyPasswordReq) (*ModifyPasswordResp, error)
	CheckUserPhoneUnique(context.Context, *CheckUserPhoneUniqueReq) (*CheckUserPhoneUniqueResp, error)
	CheckUserEmailUnique(context.Context, *CheckUserEmailUniqueReq) (*CheckUserEmailUniqueResp, error)
	GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error)
	GetDishList(context.Context, *GetDishListReq) (*GetDishListResp, error)
	DeleteDish(context.Context, *DeleteDishReq) (*DeleteDishResp, error)
	GetDishInfo(context.Context, *GetDishInfoReq) (*GetDishInfoResp, error)
	GetUserDiscount(context.Context, *GetUserDiscountReq) (*GetUserDiscountResp, error)
	StoreConsumeRecord(context.Context, *StoreConsumeRecordReq) (*StoreConsumeRecordResp, error)
	mustEmbedUnimplementedMSDBCallServer()
}

// UnimplementedMSDBCallServer must be embedded to have forward compatible implementations.
type UnimplementedMSDBCallServer struct {
}

func (UnimplementedMSDBCallServer) CreateUser(context.Context, *CreateUserReq) (*CreateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedMSDBCallServer) AddDish(context.Context, *AddDishReq) (*AddDishResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDish not implemented")
}
func (UnimplementedMSDBCallServer) CheckUserPassword(context.Context, *CheckUserPasswordReq) (*CheckUserPasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserPassword not implemented")
}
func (UnimplementedMSDBCallServer) ModifyPassword(context.Context, *ModifyPasswordReq) (*ModifyPasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyPassword not implemented")
}
func (UnimplementedMSDBCallServer) CheckUserPhoneUnique(context.Context, *CheckUserPhoneUniqueReq) (*CheckUserPhoneUniqueResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserPhoneUnique not implemented")
}
func (UnimplementedMSDBCallServer) CheckUserEmailUnique(context.Context, *CheckUserEmailUniqueReq) (*CheckUserEmailUniqueResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserEmailUnique not implemented")
}
func (UnimplementedMSDBCallServer) GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedMSDBCallServer) GetDishList(context.Context, *GetDishListReq) (*GetDishListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDishList not implemented")
}
func (UnimplementedMSDBCallServer) DeleteDish(context.Context, *DeleteDishReq) (*DeleteDishResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDish not implemented")
}
func (UnimplementedMSDBCallServer) GetDishInfo(context.Context, *GetDishInfoReq) (*GetDishInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDishInfo not implemented")
}
func (UnimplementedMSDBCallServer) GetUserDiscount(context.Context, *GetUserDiscountReq) (*GetUserDiscountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDiscount not implemented")
}
func (UnimplementedMSDBCallServer) StoreConsumeRecord(context.Context, *StoreConsumeRecordReq) (*StoreConsumeRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreConsumeRecord not implemented")
}
func (UnimplementedMSDBCallServer) mustEmbedUnimplementedMSDBCallServer() {}

// UnsafeMSDBCallServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MSDBCallServer will
// result in compilation errors.
type UnsafeMSDBCallServer interface {
	mustEmbedUnimplementedMSDBCallServer()
}

func RegisterMSDBCallServer(s grpc.ServiceRegistrar, srv MSDBCallServer) {
	s.RegisterService(&MSDBCall_ServiceDesc, srv)
}

func _MSDBCall_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSDBCallServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msdbcall.MSDBCall/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSDBCallServer).CreateUser(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MSDBCall_AddDish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSDBCallServer).AddDish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msdbcall.MSDBCall/AddDish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSDBCallServer).AddDish(ctx, req.(*AddDishReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MSDBCall_CheckUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSDBCallServer).CheckUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msdbcall.MSDBCall/CheckUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSDBCallServer).CheckUserPassword(ctx, req.(*CheckUserPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MSDBCall_ModifyPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSDBCallServer).ModifyPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msdbcall.MSDBCall/ModifyPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSDBCallServer).ModifyPassword(ctx, req.(*ModifyPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MSDBCall_CheckUserPhoneUnique_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserPhoneUniqueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSDBCallServer).CheckUserPhoneUnique(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msdbcall.MSDBCall/CheckUserPhoneUnique",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSDBCallServer).CheckUserPhoneUnique(ctx, req.(*CheckUserPhoneUniqueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MSDBCall_CheckUserEmailUnique_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserEmailUniqueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSDBCallServer).CheckUserEmailUnique(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msdbcall.MSDBCall/CheckUserEmailUnique",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSDBCallServer).CheckUserEmailUnique(ctx, req.(*CheckUserEmailUniqueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MSDBCall_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSDBCallServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msdbcall.MSDBCall/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSDBCallServer).GetUserInfo(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MSDBCall_GetDishList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDishListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSDBCallServer).GetDishList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msdbcall.MSDBCall/GetDishList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSDBCallServer).GetDishList(ctx, req.(*GetDishListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MSDBCall_DeleteDish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSDBCallServer).DeleteDish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msdbcall.MSDBCall/DeleteDish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSDBCallServer).DeleteDish(ctx, req.(*DeleteDishReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MSDBCall_GetDishInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDishInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSDBCallServer).GetDishInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msdbcall.MSDBCall/GetDishInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSDBCallServer).GetDishInfo(ctx, req.(*GetDishInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MSDBCall_GetUserDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDiscountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSDBCallServer).GetUserDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msdbcall.MSDBCall/GetUserDiscount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSDBCallServer).GetUserDiscount(ctx, req.(*GetUserDiscountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MSDBCall_StoreConsumeRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreConsumeRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSDBCallServer).StoreConsumeRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msdbcall.MSDBCall/StoreConsumeRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSDBCallServer).StoreConsumeRecord(ctx, req.(*StoreConsumeRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MSDBCall_ServiceDesc is the grpc.ServiceDesc for MSDBCall service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MSDBCall_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "msdbcall.MSDBCall",
	HandlerType: (*MSDBCallServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _MSDBCall_CreateUser_Handler,
		},
		{
			MethodName: "AddDish",
			Handler:    _MSDBCall_AddDish_Handler,
		},
		{
			MethodName: "CheckUserPassword",
			Handler:    _MSDBCall_CheckUserPassword_Handler,
		},
		{
			MethodName: "ModifyPassword",
			Handler:    _MSDBCall_ModifyPassword_Handler,
		},
		{
			MethodName: "CheckUserPhoneUnique",
			Handler:    _MSDBCall_CheckUserPhoneUnique_Handler,
		},
		{
			MethodName: "CheckUserEmailUnique",
			Handler:    _MSDBCall_CheckUserEmailUnique_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _MSDBCall_GetUserInfo_Handler,
		},
		{
			MethodName: "GetDishList",
			Handler:    _MSDBCall_GetDishList_Handler,
		},
		{
			MethodName: "DeleteDish",
			Handler:    _MSDBCall_DeleteDish_Handler,
		},
		{
			MethodName: "GetDishInfo",
			Handler:    _MSDBCall_GetDishInfo_Handler,
		},
		{
			MethodName: "GetUserDiscount",
			Handler:    _MSDBCall_GetUserDiscount_Handler,
		},
		{
			MethodName: "StoreConsumeRecord",
			Handler:    _MSDBCall_StoreConsumeRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msdbcall.proto",
}
