// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: msdbcall/proto/msdbcall.proto

package msdbcall

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MSDBCallClient is the client API for MSDBCall service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MSDBCallClient interface {
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResp, error)
	AddDish(ctx context.Context, in *AddDishReq, opts ...grpc.CallOption) (*AddDishResp, error)
}

type mSDBCallClient struct {
	cc grpc.ClientConnInterface
}

func NewMSDBCallClient(cc grpc.ClientConnInterface) MSDBCallClient {
	return &mSDBCallClient{cc}
}

func (c *mSDBCallClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResp, error) {
	out := new(CreateUserResp)
	err := c.cc.Invoke(ctx, "/msdbcall.MSDBCall/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mSDBCallClient) AddDish(ctx context.Context, in *AddDishReq, opts ...grpc.CallOption) (*AddDishResp, error) {
	out := new(AddDishResp)
	err := c.cc.Invoke(ctx, "/msdbcall.MSDBCall/AddDish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MSDBCallServer is the server API for MSDBCall service.
// All implementations must embed UnimplementedMSDBCallServer
// for forward compatibility
type MSDBCallServer interface {
	CreateUser(context.Context, *CreateUserReq) (*CreateUserResp, error)
	AddDish(context.Context, *AddDishReq) (*AddDishResp, error)
	mustEmbedUnimplementedMSDBCallServer()
}

// UnimplementedMSDBCallServer must be embedded to have forward compatible implementations.
type UnimplementedMSDBCallServer struct {
}

func (UnimplementedMSDBCallServer) CreateUser(context.Context, *CreateUserReq) (*CreateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedMSDBCallServer) AddDish(context.Context, *AddDishReq) (*AddDishResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDish not implemented")
}
func (UnimplementedMSDBCallServer) mustEmbedUnimplementedMSDBCallServer() {}

// UnsafeMSDBCallServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MSDBCallServer will
// result in compilation errors.
type UnsafeMSDBCallServer interface {
	mustEmbedUnimplementedMSDBCallServer()
}

func RegisterMSDBCallServer(s grpc.ServiceRegistrar, srv MSDBCallServer) {
	s.RegisterService(&MSDBCall_ServiceDesc, srv)
}

func _MSDBCall_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSDBCallServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msdbcall.MSDBCall/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSDBCallServer).CreateUser(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MSDBCall_AddDish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSDBCallServer).AddDish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msdbcall.MSDBCall/AddDish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSDBCallServer).AddDish(ctx, req.(*AddDishReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MSDBCall_ServiceDesc is the grpc.ServiceDesc for MSDBCall service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MSDBCall_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "msdbcall.MSDBCall",
	HandlerType: (*MSDBCallServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _MSDBCall_CreateUser_Handler,
		},
		{
			MethodName: "AddDish",
			Handler:    _MSDBCall_AddDish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msdbcall/proto/msdbcall.proto",
}
