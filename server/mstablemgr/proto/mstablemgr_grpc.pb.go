// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: mstablemgr.proto

package mstablemgr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MSTableMgrClient is the client API for MSTableMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MSTableMgrClient interface {
	OpenTable(ctx context.Context, in *OpenTableReq, opts ...grpc.CallOption) (*OpenTableResp, error)
	ChangeTable(ctx context.Context, in *ChangeTableReq, opts ...grpc.CallOption) (*ChangeTableResp, error)
	CompleteTable(ctx context.Context, in *CompleteTableReq, opts ...grpc.CallOption) (*CompleteTableResp, error)
	GetOrderDetail(ctx context.Context, in *GetOrderDetailReq, opts ...grpc.CallOption) (*GetOrderDetailResp, error)
	AddTable(ctx context.Context, in *AddTableReq, opts ...grpc.CallOption) (*AddTableResp, error)
	DelTable(ctx context.Context, in *DelTableReq, opts ...grpc.CallOption) (*DelTableResp, error)
	GetTablesStatus(ctx context.Context, in *GetTablesStatusReq, opts ...grpc.CallOption) (*GetTablesStatusResp, error)
	OrderDish(ctx context.Context, in *OrderDishReq, opts ...grpc.CallOption) (*OrderDishResp, error)
	GetTableInfo(ctx context.Context, in *GetTableInfoReq, opts ...grpc.CallOption) (*GetTableInfoResp, error)
}

type mSTableMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewMSTableMgrClient(cc grpc.ClientConnInterface) MSTableMgrClient {
	return &mSTableMgrClient{cc}
}

func (c *mSTableMgrClient) OpenTable(ctx context.Context, in *OpenTableReq, opts ...grpc.CallOption) (*OpenTableResp, error) {
	out := new(OpenTableResp)
	err := c.cc.Invoke(ctx, "/mstablemgr.MSTableMgr/OpenTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mSTableMgrClient) ChangeTable(ctx context.Context, in *ChangeTableReq, opts ...grpc.CallOption) (*ChangeTableResp, error) {
	out := new(ChangeTableResp)
	err := c.cc.Invoke(ctx, "/mstablemgr.MSTableMgr/ChangeTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mSTableMgrClient) CompleteTable(ctx context.Context, in *CompleteTableReq, opts ...grpc.CallOption) (*CompleteTableResp, error) {
	out := new(CompleteTableResp)
	err := c.cc.Invoke(ctx, "/mstablemgr.MSTableMgr/CompleteTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mSTableMgrClient) GetOrderDetail(ctx context.Context, in *GetOrderDetailReq, opts ...grpc.CallOption) (*GetOrderDetailResp, error) {
	out := new(GetOrderDetailResp)
	err := c.cc.Invoke(ctx, "/mstablemgr.MSTableMgr/GetOrderDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mSTableMgrClient) AddTable(ctx context.Context, in *AddTableReq, opts ...grpc.CallOption) (*AddTableResp, error) {
	out := new(AddTableResp)
	err := c.cc.Invoke(ctx, "/mstablemgr.MSTableMgr/AddTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mSTableMgrClient) DelTable(ctx context.Context, in *DelTableReq, opts ...grpc.CallOption) (*DelTableResp, error) {
	out := new(DelTableResp)
	err := c.cc.Invoke(ctx, "/mstablemgr.MSTableMgr/DelTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mSTableMgrClient) GetTablesStatus(ctx context.Context, in *GetTablesStatusReq, opts ...grpc.CallOption) (*GetTablesStatusResp, error) {
	out := new(GetTablesStatusResp)
	err := c.cc.Invoke(ctx, "/mstablemgr.MSTableMgr/GetTablesStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mSTableMgrClient) OrderDish(ctx context.Context, in *OrderDishReq, opts ...grpc.CallOption) (*OrderDishResp, error) {
	out := new(OrderDishResp)
	err := c.cc.Invoke(ctx, "/mstablemgr.MSTableMgr/OrderDish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mSTableMgrClient) GetTableInfo(ctx context.Context, in *GetTableInfoReq, opts ...grpc.CallOption) (*GetTableInfoResp, error) {
	out := new(GetTableInfoResp)
	err := c.cc.Invoke(ctx, "/mstablemgr.MSTableMgr/GetTableInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MSTableMgrServer is the server API for MSTableMgr service.
// All implementations must embed UnimplementedMSTableMgrServer
// for forward compatibility
type MSTableMgrServer interface {
	OpenTable(context.Context, *OpenTableReq) (*OpenTableResp, error)
	ChangeTable(context.Context, *ChangeTableReq) (*ChangeTableResp, error)
	CompleteTable(context.Context, *CompleteTableReq) (*CompleteTableResp, error)
	GetOrderDetail(context.Context, *GetOrderDetailReq) (*GetOrderDetailResp, error)
	AddTable(context.Context, *AddTableReq) (*AddTableResp, error)
	DelTable(context.Context, *DelTableReq) (*DelTableResp, error)
	GetTablesStatus(context.Context, *GetTablesStatusReq) (*GetTablesStatusResp, error)
	OrderDish(context.Context, *OrderDishReq) (*OrderDishResp, error)
	GetTableInfo(context.Context, *GetTableInfoReq) (*GetTableInfoResp, error)
	mustEmbedUnimplementedMSTableMgrServer()
}

// UnimplementedMSTableMgrServer must be embedded to have forward compatible implementations.
type UnimplementedMSTableMgrServer struct {
}

func (UnimplementedMSTableMgrServer) OpenTable(context.Context, *OpenTableReq) (*OpenTableResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenTable not implemented")
}
func (UnimplementedMSTableMgrServer) ChangeTable(context.Context, *ChangeTableReq) (*ChangeTableResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeTable not implemented")
}
func (UnimplementedMSTableMgrServer) CompleteTable(context.Context, *CompleteTableReq) (*CompleteTableResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteTable not implemented")
}
func (UnimplementedMSTableMgrServer) GetOrderDetail(context.Context, *GetOrderDetailReq) (*GetOrderDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderDetail not implemented")
}
func (UnimplementedMSTableMgrServer) AddTable(context.Context, *AddTableReq) (*AddTableResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTable not implemented")
}
func (UnimplementedMSTableMgrServer) DelTable(context.Context, *DelTableReq) (*DelTableResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelTable not implemented")
}
func (UnimplementedMSTableMgrServer) GetTablesStatus(context.Context, *GetTablesStatusReq) (*GetTablesStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTablesStatus not implemented")
}
func (UnimplementedMSTableMgrServer) OrderDish(context.Context, *OrderDishReq) (*OrderDishResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderDish not implemented")
}
func (UnimplementedMSTableMgrServer) GetTableInfo(context.Context, *GetTableInfoReq) (*GetTableInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableInfo not implemented")
}
func (UnimplementedMSTableMgrServer) mustEmbedUnimplementedMSTableMgrServer() {}

// UnsafeMSTableMgrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MSTableMgrServer will
// result in compilation errors.
type UnsafeMSTableMgrServer interface {
	mustEmbedUnimplementedMSTableMgrServer()
}

func RegisterMSTableMgrServer(s grpc.ServiceRegistrar, srv MSTableMgrServer) {
	s.RegisterService(&MSTableMgr_ServiceDesc, srv)
}

func _MSTableMgr_OpenTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenTableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSTableMgrServer).OpenTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mstablemgr.MSTableMgr/OpenTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSTableMgrServer).OpenTable(ctx, req.(*OpenTableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MSTableMgr_ChangeTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeTableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSTableMgrServer).ChangeTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mstablemgr.MSTableMgr/ChangeTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSTableMgrServer).ChangeTable(ctx, req.(*ChangeTableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MSTableMgr_CompleteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteTableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSTableMgrServer).CompleteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mstablemgr.MSTableMgr/CompleteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSTableMgrServer).CompleteTable(ctx, req.(*CompleteTableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MSTableMgr_GetOrderDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSTableMgrServer).GetOrderDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mstablemgr.MSTableMgr/GetOrderDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSTableMgrServer).GetOrderDetail(ctx, req.(*GetOrderDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MSTableMgr_AddTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSTableMgrServer).AddTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mstablemgr.MSTableMgr/AddTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSTableMgrServer).AddTable(ctx, req.(*AddTableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MSTableMgr_DelTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelTableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSTableMgrServer).DelTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mstablemgr.MSTableMgr/DelTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSTableMgrServer).DelTable(ctx, req.(*DelTableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MSTableMgr_GetTablesStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTablesStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSTableMgrServer).GetTablesStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mstablemgr.MSTableMgr/GetTablesStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSTableMgrServer).GetTablesStatus(ctx, req.(*GetTablesStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MSTableMgr_OrderDish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderDishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSTableMgrServer).OrderDish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mstablemgr.MSTableMgr/OrderDish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSTableMgrServer).OrderDish(ctx, req.(*OrderDishReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MSTableMgr_GetTableInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSTableMgrServer).GetTableInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mstablemgr.MSTableMgr/GetTableInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSTableMgrServer).GetTableInfo(ctx, req.(*GetTableInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MSTableMgr_ServiceDesc is the grpc.ServiceDesc for MSTableMgr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MSTableMgr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mstablemgr.MSTableMgr",
	HandlerType: (*MSTableMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenTable",
			Handler:    _MSTableMgr_OpenTable_Handler,
		},
		{
			MethodName: "ChangeTable",
			Handler:    _MSTableMgr_ChangeTable_Handler,
		},
		{
			MethodName: "CompleteTable",
			Handler:    _MSTableMgr_CompleteTable_Handler,
		},
		{
			MethodName: "GetOrderDetail",
			Handler:    _MSTableMgr_GetOrderDetail_Handler,
		},
		{
			MethodName: "AddTable",
			Handler:    _MSTableMgr_AddTable_Handler,
		},
		{
			MethodName: "DelTable",
			Handler:    _MSTableMgr_DelTable_Handler,
		},
		{
			MethodName: "GetTablesStatus",
			Handler:    _MSTableMgr_GetTablesStatus_Handler,
		},
		{
			MethodName: "OrderDish",
			Handler:    _MSTableMgr_OrderDish_Handler,
		},
		{
			MethodName: "GetTableInfo",
			Handler:    _MSTableMgr_GetTableInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mstablemgr.proto",
}
